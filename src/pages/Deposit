import React, {useState} from 'react'
import { UserContext } from './Context'
import Transaction from './Transaction';


function Deposit() {
  const { user, setUser } = useUserContext(UserContext);
  const [input, setInput] = useState(0);
  const [total, setTotal] = useState(user[0].balance);
  const [isError, setIsError] = useState(false);
  const [success, setSuccess] = useState(false);
  const [errorMessage, setErrorMessage] = useState("");

  
  function handleChange(e){
      if(e.target.value === null) { 
          setButtonStatus(true)
          setDeposit(e.currentTarget.value)    
      } else {
          setButtonStatus(false)
          setDeposit(e.currentTarget.value)
      }
  }

	function handleDeposit({deposit, balance}) {
	if (!isNaN(deposit) && deposit > 0) {
		let newBalance = Number(balance) + Number(deposit);
    user[0].balance = newBalance

    setBalance(newBalance);
    setDeposit('');
    setStatus(`$${deposit} has been successfully deposited into your account`);

    if (
      setStatus(`$${deposit} deposited into account`);
      setTimeout(() => setStatus(''), 5000);
      setDeposit('');
      setBalance(Number(newBalance));
      setButtonStatus(true);
    )
     else if (!isNaN(deposit)) {
    setStatus('Transaction Failed: Amount must be greater than $0.00.');
    setDeposit('');
    setTimeout(() => setStatus(''), 5000);
        setButtonStatus(true);
        alert(`Error: Deposit amount must be greater than $0.00`);
    } else {
    setStatus('Transaction Failed: Numerical value needed.');
    setDeposit('');
    setTimeout(() => setStatus(''), 5000);
        setButtonStatus(true);
        alert(`Error: Numerical value needed.`);
    }
    return;
  }














   
        
   //TODO: Enable login functionality/gate

    // for (const { email, password, balance } of ctx.users) {
    //   if (loginEmail === email && loginPassword === password) {
    //   for (var i = 0, length = ctx.users.length; i < length; i++) 
    //   {if (ctx.users[i].email === loginEmail) {
    //     ctx.users[i].balance = Number(newBalance);
    //     tracker = true;}}
    //   }
    }



  return (
    <div>
      <Transaction
        label="Deposit"
        handleChange={handleChange}
        handleTransact={handleDeposit}
        // balance={NewBalance}
        // isError={isError}
        // success={success}
        // errorMessage={errorMessage}
      />
    </div>
  );
}

export default Deposit; 